(def bytecode1 (slurp "nft-bytecode.txt"))
(def bytecode2 (slurp "pnft-bytecode.txt"))

(defnode Root)

(defchain find-address
  "0xFF" (HexToBytes) >= .bytes
  (Input) (Take 0) (HexToBytes) (AppendTo .bytes) ; address
  (Input) (Take 1) (HexToBytes) (AppendTo .bytes) ; salt
  (Input) (Take 2) (HexToBytes) (Hash.Keccak256) (AppendTo .bytes) ; bytecode
  .bytes (Hash.Keccak256) (ToHex) (Slice :From 26) >= .res
  "0x" (PrependTo .res) .res)

(defn random-try [bytecode]
  (Chain "random-try"
         "0xce0042B868300000d44A59004Da54A005ffdcf9f" >> .args
         (RandomBytes 32) (ToHex) >> .args = .salt
         bytecode >> .args
         .args (Do find-address) = .address
         .address (Set .res "address")
         .salt (Set .res "salt")
         .res))

(defn try-many [n bytecode]
  (Chain "try-many" :Looped
         nil (Expand 4096 (random-try bytecode) :Threads 128)
         (ForEach (-> = .record
                      (Take "address") (Slice :From 2 :To 9)
                      (When (Is "c0de721") (->
                                            .record (ToString) = .result
                                            "results.txt"
                                            (FS.Write n :Append true)
                                            (FS.Write .result :Append true)
                                            (FS.Write "\n" :Append true)))))))

(schedule Root (try-many "1: " bytecode1))
(schedule Root (try-many "2: " bytecode2))
(run Root)